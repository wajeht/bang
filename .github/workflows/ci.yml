name: CI

on:
  push:
    branches: [main]
  pull_request:

env:
  # app
  APP_PORT: 80
  APP_ENV: 'development'
  APP_URL: 'localhost'
  APP_ADMIN_EMAIL: 'deeznutz@gmail.com'
  APP_SECRET_SALT: 'bang'

  # redis
  REDIS_HOST: 'localhost'
  REDIS_PORT: 6379
  REDIS_PASSWORD: 'password'

  # session
  SESSION_STORE_PREFIX: 'deez'
  SESSION_SECRET: 'nutz'
  SESSION_DOMAIN: 'localhost' # needs to be domain.com without http or https

  # database
  DB_PORT: 5432
  DB_HOST: 'localhost'
  DB_USERNAME: 'postgres'
  DB_PASSWORD: 'postgres'
  DB_DATABASE: 'database'

  # github
  GITHUB_REDIRECT_URL: 'http://localhost/oauth/github/redirect'
  GITHUB_CLIENT_ID: 'deez'
  GITHUB_CLIENT_SECRET: 'nutz'

jobs:
  unit-test:
    name: Unit tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: database
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Create .env file from .env.ci
        run: cp .env.ci .env

      - name: Install dependencies
        run: npm i

      - name: Migrate dev database
        run: npm run db:prepare:dev

      - name: Test codes
        run: npm run test:coverage

  # browser-test:
  #   timeout-minutes: 60
  #   name: Browser tests
  #   runs-on: ubuntu-latest

  #   services:
  #     postgres:
  #       image: postgres:14
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: database
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #     redis:
  #       image: redis
  #       ports:
  #         - 6379:6379
  #       options: >-
  #         --health-cmd "redis-cli ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   strategy:
  #     matrix:
  #       node-version: [22.x]

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: 'npm'

  #     - name: Create .env file from .env.ci
  #       run: cp .env.ci .env

  #     - name: shell
  #       run: ls -la

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Install Playwright Browsers
  #       run: npx playwright install --with-deps

  #     - name: Migrate dev database
  #       run: npm run db:prepare:dev

  #     - name: Run Playwright tests
  #       run: npx playwright test

  #     - uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 30

  lint:
    name: ESLint
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm i

      - name: Lint codes
        run: npm run lint

  format:
    needs: [lint, unit-test]
    name: Prettier format
    runs-on: ubuntu-latest

    permissions:
      contents: write

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm i

      - name: Format codes
        run: npm run format

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'style: format codes'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Generate Image Name
        id: image-name
        run: |
          IMAGE_URL=$(echo ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:$(echo ${{ github.sha }} | cut -c1-7) | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_OUTPUT

      - name: Build and push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ steps.image-name.outputs.IMAGE_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [lint, format, unit-test, build]
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://bang.jaw.dev/

    steps:
      - name: Generate Image Name
        id: image-name
        run: |
          IMAGE_URL=$(echo ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:$(echo ${{ github.sha }} | cut -c1-7) | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_OUTPUT
      - name: Deploy Image to Server
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: '${{ secrets.CAPROVER_SERVER }}'
          app: '${{ secrets.APP_NAME }}'
          token: '${{ secrets.APP_TOKEN }}'
          image: ${{ steps.image-name.outputs.IMAGE_URL }}
